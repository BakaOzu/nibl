// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  angular.module('niblApp').controller('sidebarCtrl', function($scope, taskService, toaster) {
    var resetSidebar;
    resetSidebar = function() {
      $scope.sidebarMode = 'news';
      $scope.selectedTask = {};
      $scope.originalTask = {};
      return $scope.discardedData = {};
    };
    $scope.alertIfUnchangedChanges = function() {
      var text;
      if (($scope.sidebarMode === 'taskCreation' && $scope.selectedTask !== {}) || ($scope.sidebarMode === 'taskEdition' && !angular.equals($scope.selectedTask, $scope.originalTask))) {
        $scope.discardedData = {
          mode: $scope.sidebarMode,
          task: $scope.selectedTask
        };
        if ($scope.sidebarMode === 'taskCreation') {
          text = 'Создание задачи прервано, нажмите, чтобы вернуться.';
        } else {
          text = 'Создание задачи прервано, нажмите, чтобы вернуться.';
        }
        return toaster.pop('warning', text, null, null, null, function() {
          $scope.selectedTask = $scope.discardedData.task;
          return $scope.sidebarMode = $scope.discardedData.mode;
        });
      }
    };
    $scope.openTaskCreationForm = function() {
      $scope.alertIfUnchangedChanges();
      $scope.selectedTask = {};
      return $scope.sidebarMode = 'taskCreation';
    };
    $scope.openTaskEditForm = function(task) {
      $scope.alertIfUnchangedChanges();
      $scope.originalTask = task;
      $scope.selectedTask = task.clone();
      return $scope.sidebarMode = 'taskEdition';
    };
    $scope.save = function(task) {
      if ($scope.sidebarMode === 'taskCreation') {
        return taskService.post(task).then(function(refinedTask) {
          $scope.tasks.push(refinedTask);
          return $scope.sidebarMode = 'taskDetail';
        }, function(errors) {
          return toaster.pop('error', errors.statusText);
        });
      } else if (!angular.equals($scope.selectedTask, $scope.originalTask)) {
        return task.put().then(function(refinedTask) {
          var taskIndex;
          taskIndex = _.findIndex($scope.tasks, {
            url: task.url
          });
          $scope.tasks[taskIndex] = refinedTask;
          return $scope.sidebarMode = 'taskDetail';
        }, function(errors) {
          return toaster.pop('error', errors.statusText);
        });
      }
    };
    $scope["delete"] = function(task) {
      return task.remove().then(function() {
        _.pull($scope.tasks, task);
        resetSidebar();
        task = $scope.discardedTask;
        return toaster.pop('error', 'Task deleted');
      }, function(errors) {
        return toaster.pop('error', errors.statusText);
      });
    };
    $scope.discard = function() {};
    if ($scope.sidebarMode === 'taskCreation') {
      resetSidebar();
    } else {
      $scope.sidebarMode = 'taskDetail';
    }
    return resetSidebar();
  });

}).call(this);
